{"version":3,"sources":["Colors.ts"],"names":["Animated","cond","add","multiply","lessThan","abs","modulo","round","interpolate","divide","sub","color","Extrapolate","Node","match","condsAndResPairs","offset","length","undefined","colorHSV","h","s","v","c","hh","x","m","colorRGB","r","g","b","rgbToHsv","ma","Math","max","mi","min","d","interpolateColors","animationValue","inputRange","colors","colorsAsHSV","map","outputRange","extrapolate","CLAMP"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  modulo,\n  round,\n  interpolate,\n  divide,\n  sub,\n  color,\n  Extrapolate,\n  Node,\n} = Animated;\n\ntype Node = ReturnType<typeof add>;\ntype Adaptable<T> = Node | T;\n\ninterface RGBColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\nfunction match(condsAndResPairs: Adaptable<number>[], offset = 0): any {\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  } if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n  return cond(\n    condsAndResPairs[offset],\n    condsAndResPairs[offset + 1],\n    match(condsAndResPairs, offset + 2),\n  );\n}\n\nfunction colorHSV(\n  h: Adaptable<number> /* 0 - 360 */,\n  s: Adaptable<number> /* 0 - 1 */,\n  v: Adaptable<number>, /* 0 - 1 */\n) {\n  // Converts color from HSV format into RGB\n  // Formula explained here: https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n  const c = multiply(v, s);\n  const hh = divide(h, 60);\n  const x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n\n  const m = sub(v, c);\n\n  const colorRGB = (r: Adaptable<number>, g: Adaptable<number>, b: Adaptable<number>) => color(\n    round(multiply(255, add(r, m))),\n    round(multiply(255, add(g, m))),\n    round(multiply(255, add(b, m))),\n  );\n\n  return match([\n    lessThan(h, 60),\n    colorRGB(c, x, 0),\n    lessThan(h, 120),\n    colorRGB(x, c, 0),\n    lessThan(h, 180),\n    colorRGB(0, c, x),\n    lessThan(h, 240),\n    colorRGB(0, x, c),\n    lessThan(h, 300),\n    colorRGB(x, 0, c),\n    colorRGB(c, 0, x) /* else */,\n  ]);\n}\n\nconst rgbToHsv = (c: RGBColor) => {\n  const r = c.r / 255;\n  const g = c.g / 255;\n  const b = c.b / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h: number = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n    case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n    case g: h = (b - r) / d + 2; break;\n    case b: h = (r - g) / d + 4; break;\n    default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h: h * 360, s, v };\n};\n\nconst interpolateColors = (animationValue: Adaptable<number>, inputRange: number[], colors: RGBColor[]) => {\n  const colorsAsHSV = colors.map(c => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.h),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.s),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.v),\n    extrapolate: Extrapolate.CLAMP,\n  });\n  return colorHSV(h, s, v);\n};\n\nexport default interpolateColors;\n"]}