{"version":3,"sources":["Math.ts"],"names":["Animated","cond","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","greaterOrEq","Node","toRad","deg","Math","PI","toDeg","rad","args","reduce","acc","arg","atan","atan2","y","x","coeff1","coeff2","absY","angle"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterOrEq,\n  Node,\n} = Animated;\n\ntype Node = ReturnType<typeof add>;\ntype Adaptable<T> = Node | T;\n\n// ## Math\nexport const toRad = (deg: Adaptable<number>) => multiply(deg, Math.PI / 180);\nexport const toDeg = (rad: Adaptable<number>) => multiply(rad, 180 / Math.PI);\n\nexport const min = (...args: Adaptable<number>[]) => args.reduce((acc, arg) => min2(acc, arg));\nexport const max = (...args: Adaptable<number>[]) => args.reduce((acc, arg) => max2(acc, arg));\n\nexport const atan = (rad: Adaptable<number>) => sub(\n  multiply(Math.PI / 4, rad),\n  multiply(multiply(rad, sub(abs(rad), 1)), add(0.2447, multiply(0.0663, abs(rad)))),\n);\nexport const atan2 = (y: Adaptable<number>, x: Adaptable<number>) => {\n  const coeff1 = Math.PI / 4;\n  const coeff2 = 3 * coeff1;\n  const absY = abs(y);\n  const angle = cond(greaterOrEq(x, 0), [\n    sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY)))),\n  ], [\n    sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x)))),\n  ]);\n  return cond(lessThan(y, 0), multiply(angle, -1), angle);\n};\n"]}