import Animated from"react-native-reanimated";import{State as GestureState}from"react-native-gesture-handler";import{runDecay}from"./AnimationRunners";var Clock=Animated.Clock,Value=Animated.Value,add=Animated.add,block=Animated.block,cond=Animated.cond,divide=Animated.divide,eq=Animated.eq,greaterThan=Animated.greaterThan,lessThan=Animated.lessThan,multiply=Animated.multiply,set=Animated.set,stopClock=Animated.stopClock,sub=Animated.sub;export var preserveOffset=function preserveOffset(value,state){var previous=new Value(0);var offset=new Value(0);return block([cond(eq(state,GestureState.BEGAN),[set(previous,0)],[set(offset,add(offset,sub(value,previous))),set(previous,value)]),offset]);};export var decay=function decay(value,state,velocity){var decayedValue=new Value(0);var offset=new Value(0);var clock=new Clock();var rerunDecaying=new Value(0);return block([cond(eq(state,GestureState.END),[set(decayedValue,runDecay(clock,add(value,offset),velocity,rerunDecaying))],[stopClock(clock),cond(eq(state,GestureState.BEGAN),[set(rerunDecaying,0),set(offset,sub(decayedValue,value))]),set(decayedValue,add(value,offset))]),decayedValue]);};export var limit=function limit(value,state,min,max){var offset=new Animated.Value(0);var offsetValue=add(offset,value);return block([cond(eq(state,GestureState.BEGAN),[cond(lessThan(offsetValue,min),set(offset,sub(min,value))),cond(greaterThan(offsetValue,max),set(offset,sub(max,value)))]),cond(lessThan(offsetValue,min),min,cond(greaterThan(offsetValue,max),max,offsetValue))]);};export var preserveMultiplicativeOffset=function preserveMultiplicativeOffset(value,state){var previous=new Animated.Value(1);var offset=new Animated.Value(1);return block([cond(eq(state,GestureState.BEGAN),[set(previous,1)],[set(offset,multiply(offset,divide(value,previous))),set(previous,value)]),offset]);};
//# sourceMappingURL=Gesture.js.map