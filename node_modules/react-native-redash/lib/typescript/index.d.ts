import Animated from "react-native-reanimated";
export { default as ReText } from "./ReText";
export { default as Interactable } from "./Interactable";
export { atan, atan2, min, max, toRad, toDeg, } from "./Math";
export { default as interpolateColors } from "./Colors";
export { runSpring, runTiming, runDecay } from "./AnimationRunners";
export { preserveOffset, preserveMultiplicativeOffset, decay, limit, } from "./Gesture";
declare const clockRunning: typeof Animated.clockRunning, add: (a: Animated.Adaptable<number>, b: Animated.Adaptable<number>, ...others: Animated.Adaptable<number>[]) => Animated.Node<number>, timing: typeof Animated.timing;
export { timing, clockRunning, add };
export declare type TimingConfig = Parameters<typeof timing>[1];
export declare type Clock = Parameters<typeof clockRunning>[0];
export declare type Node = ReturnType<typeof add>;
export declare type Adaptable<T> = Node | T;
export declare const snapPoint: (value: number | Animated.Node<number>, velocity: number | Animated.Node<number>, points: number[]) => Animated.Node<number>;
export declare const binaryInterpolation: (value: number | Animated.Node<number>, origin: number | Animated.Node<number>, destination: number | Animated.Node<number>) => Animated.Node<number>;
export declare const lookup: (array: (number | Animated.Node<number>)[], index: number | Animated.Node<number>, notFound?: Animated.Node<number>) => number | Animated.Node<number>;
export declare const translateZ: (perspective: number | Animated.Node<number>, z: number | Animated.Node<number>) => {
    scale: Animated.Node<number>;
};
export declare const onScroll: (contentOffset: {
    x?: Animated.Node<number> | undefined;
    y?: Animated.Node<number> | undefined;
}) => (...args: any[]) => void;
